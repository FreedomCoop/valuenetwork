# Generated by Django 2.0.13 on 2020-06-20 18:48

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('valueaccounting', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Space', max_length=100, verbose_name='Name')),
                ('p_address', models.CharField(help_text='Postal address able to receive by post', max_length=200, verbose_name='Address')),
                ('town', models.CharField(help_text='Town or City', max_length=150, verbose_name='Town')),
                ('postalcode', models.CharField(blank=True, max_length=5, null=True, verbose_name='Postal/Zip code')),
                ('ic_larder', models.BooleanField(default=False, verbose_name='Is a Larder?')),
                ('size', models.DecimalField(blank=True, decimal_places=2, help_text='Number of units (accept 2 decimals)', max_digits=20, null=True, verbose_name='Size')),
                ('longitude', models.IntegerField(blank=True, null=True, verbose_name='Longitude (geo)')),
                ('latitude', models.IntegerField(blank=True, null=True, verbose_name='Latitude (geo)')),
                ('description', models.TextField(blank=True, help_text='Exact localization, indications to arrive or comments', null=True, verbose_name='Description of the Address')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 's- Addresses',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Art', max_length=200, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(help_text='The name of the Art', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('name_es', models.CharField(help_text='The name of the Art', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('name_ca', models.CharField(help_text='The name of the Art', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('verb', models.CharField(blank=True, help_text='The verb of the action, infinitive', max_length=200, verbose_name='Verb')),
                ('verb_en', models.CharField(blank=True, help_text='The verb of the action, infinitive', max_length=200, null=True, verbose_name='Verb')),
                ('verb_es', models.CharField(blank=True, help_text='The verb of the action, infinitive', max_length=200, null=True, verbose_name='Verb')),
                ('verb_ca', models.CharField(blank=True, help_text='The verb of the action, infinitive', max_length=200, null=True, verbose_name='Verb')),
                ('gerund', models.CharField(blank=True, help_text='The verb in gerund, present', max_length=200, verbose_name='Gerund')),
                ('gerund_en', models.CharField(blank=True, help_text='The verb in gerund, present', max_length=200, null=True, verbose_name='Gerund')),
                ('gerund_es', models.CharField(blank=True, help_text='The verb in gerund, present', max_length=200, null=True, verbose_name='Gerund')),
                ('gerund_ca', models.CharField(blank=True, help_text='The verb in gerund, present', max_length=200, null=True, verbose_name='Gerund')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_ca', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('clas', models.CharField(blank=True, help_text='Django model or python class associated to the Job', max_length=50, verbose_name='Clas')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'a- Skills',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('changed_date', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Record',
                'verbose_name_plural': 'o- Records',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Space', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description of the Region')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subregions', to='general.Region')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 's- Regions',
            },
        ),
        migrations.CreateModel(
            name='rel_Job_Jobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_jobs1', to='general.Job')),
                ('job2', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_jobs2', to='general.Job')),
            ],
            options={
                'verbose_name': 'J_job',
                'verbose_name_plural': 'Related jobs',
            },
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Art', max_length=200, unique=True, verbose_name='Name')),
                ('verb', models.CharField(blank=True, help_text='The verb of the action, infinitive', max_length=200, verbose_name='Verb')),
                ('gerund', models.CharField(blank=True, help_text='The verb in gerund, present', max_length=200, verbose_name='Gerund')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('clas', models.CharField(blank=True, help_text='Django model or python class associated to the Relation', max_length=50, verbose_name='Class')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subarts', to='general.Relation')),
            ],
            options={
                'verbose_name': 'Relation',
                'verbose_name_plural': 'a- Relations',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='The name of the Concept', max_length=200, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(default='', help_text='The name of the Concept', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('name_es', models.CharField(default='', help_text='The name of the Concept', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('name_ca', models.CharField(default='', help_text='The name of the Concept', max_length=200, null=True, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_ca', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('clas', models.CharField(blank=True, help_text='Django model or python class associated to the Type', max_length=200, verbose_name='Class')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'c- Type',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('code', models.CharField(max_length=4, verbose_name='Code or Symbol')),
                ('ocp_unit', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gen_unit', to='valueaccounting.Unit', verbose_name='OCP Unit')),
                ('region', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Region', verbose_name='related use Region')),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'o- Units',
            },
        ),
        migrations.CreateModel(
            name='Artwork_Type',
            fields=[
                ('typ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Type')),
            ],
            options={
                'verbose_name': 'Type of Artwork',
                'verbose_name_plural': 'o--> Types of Artworks',
            },
            bases=('general.type',),
        ),
        migrations.CreateModel(
            name='Being_Type',
            fields=[
                ('typ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Type')),
            ],
            options={
                'verbose_name': 'Type of entity',
                'verbose_name_plural': 'e--> Types of entities',
            },
            bases=('general.type',),
        ),
        migrations.CreateModel(
            name='Space_Type',
            fields=[
                ('typ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Type')),
            ],
            options={
                'verbose_name': 'Type of Space',
                'verbose_name_plural': 's--> Types of Spaces',
            },
            bases=('general.type',),
        ),
        migrations.CreateModel(
            name='UnitRatio',
            fields=[
                ('record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Record')),
                ('rate', models.DecimalField(decimal_places=9, default=Decimal('0.0'), max_digits=50, verbose_name='Ratio multiplier')),
                ('in_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratio_in', to='general.Unit', verbose_name='in Unit')),
                ('out_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratio_out', to='general.Unit', verbose_name='out Unit')),
            ],
            options={
                'verbose_name': 'Equivalence between Units',
                'verbose_name_plural': 'o- Equivalences between Units',
            },
            bases=('general.record',),
        ),
        migrations.AddField(
            model_name='type',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='general.Type'),
        ),
        migrations.AddField(
            model_name='rel_job_jobs',
            name='relation',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='jo_job+', to='general.Relation'),
        ),
        migrations.AddField(
            model_name='job',
            name='jobs',
            field=models.ManyToManyField(blank=True, through='general.rel_Job_Jobs', to='general.Job', verbose_name='related Skills'),
        ),
        migrations.AddField(
            model_name='job',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subarts', to='general.Job'),
        ),
        migrations.AddField(
            model_name='address',
            name='jobs',
            field=models.ManyToManyField(blank=True, related_name='addresses', to='general.Job', verbose_name='Related Jobs'),
        ),
        migrations.AddField(
            model_name='address',
            name='region',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rel_addresses', to='general.Region', verbose_name='Region'),
        ),
        migrations.AddField(
            model_name='address',
            name='size_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Unit', verbose_name='Unit of measure'),
        ),
        migrations.CreateModel(
            name='Address_Type',
            fields=[
                ('addrTypeSpace_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Space_Type')),
            ],
            options={
                'verbose_name': 'Type of Address',
                'verbose_name_plural': 's-> Types of Addresses',
            },
            bases=('general.space_type',),
        ),
        migrations.CreateModel(
            name='Company_Type',
            fields=[
                ('companyType_being_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Being_Type')),
            ],
            options={
                'verbose_name': 'Type of Company',
                'verbose_name_plural': 'e-> Types of Companies',
            },
            bases=('general.being_type',),
        ),
        migrations.CreateModel(
            name='Material_Type',
            fields=[
                ('materialType_artwork_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Artwork_Type')),
            ],
            options={
                'verbose_name': 'Type of Material artwork',
                'verbose_name_plural': 'o-> Types of Material artworks',
            },
            bases=('general.artwork_type',),
        ),
        migrations.CreateModel(
            name='Nonmaterial_Type',
            fields=[
                ('nonmaterialType_artwork_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Artwork_Type')),
            ],
            options={
                'verbose_name': 'Type of Non-material artwork',
                'verbose_name_plural': 'o-> Types of Non-material artworks',
            },
            bases=('general.artwork_type',),
        ),
        migrations.CreateModel(
            name='Project_Type',
            fields=[
                ('projectType_being_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Being_Type')),
            ],
            options={
                'verbose_name': 'Type of Project',
                'verbose_name_plural': 'e-> Types of Projects',
            },
            bases=('general.being_type',),
        ),
        migrations.CreateModel(
            name='Record_Type',
            fields=[
                ('recordType_artwork_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Artwork_Type')),
            ],
            options={
                'verbose_name': 'Type of Record',
                'verbose_name_plural': 'o-> Types of Records',
            },
            bases=('general.artwork_type',),
        ),
        migrations.CreateModel(
            name='Region_Type',
            fields=[
                ('regionType_space_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Space_Type')),
            ],
            options={
                'verbose_name': 'Type of Region',
                'verbose_name_plural': 's-> Types of Regions',
            },
            bases=('general.space_type',),
        ),
        migrations.CreateModel(
            name='Unit_Type',
            fields=[
                ('unitType_artwork_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='general.Artwork_Type')),
            ],
            options={
                'verbose_name': 'Type of Unit',
                'verbose_name_plural': 'o-> Types of Units',
            },
            bases=('general.artwork_type',),
        ),
        migrations.AddField(
            model_name='unit',
            name='unit_type',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Unit_Type', verbose_name='Type of Unit'),
        ),
        migrations.AddField(
            model_name='region',
            name='region_type',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Region_Type', verbose_name='Type of region'),
        ),
        migrations.AddField(
            model_name='record',
            name='record_type',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Record_Type', verbose_name='Type of Record'),
        ),
        migrations.AddField(
            model_name='address',
            name='address_type',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general.Address_Type', verbose_name='Type of address'),
        ),
    ]
