Prerequisites:
--------------------------------------------------------------------------------

Prepare the user creation script to be executed when building the application image
by exporting your own environment variables values for user, password and email.

```
export EMAIL='admin@example.com'
export PASSWORD='mrY7rZZ6ztjN90fN6hy6'
export USER='valuenetwork_user'

sed "s/VALUE_NETWORK_EMAIL/$EMAIL/" cmd/create-user.sh.dist > cmd/create-user.sh
sed -i "s/VALUE_NETWORK_PASSWORD/$PASSWORD/" cmd/create-user.sh
sed -i "s/VALUE_NETWORK_USER/$USER/" cmd/create-user.sh
```


To install within Docker for development:
--------------------------------------------------------------------------------

1. Bring up the container with docker-compose:

    docker-compose up

2. This will appear to pre-seed the DB but this is actually done within the
   container, and docker-compose will mount a volume mapped to your local
   filesystem over the top of the built directory for development. To fix this,
   migrate again whilst running:

    docker-compose exec valuenetwork ./manage.py migrate

3. You will also have to redo all the following steps that have been done inside
   the clone of your working directory within the container:

    docker-compose exec valuenetwork cp ./cmd/create-user.sh /usr/local/bin/create-user.sh
    docker-compose exec valuenetwork chmod +x /usr/local/bin/create-user.sh
    docker-compose exec valuenetwork /usr/local/bin/create-user.sh
    docker-compose exec valuenetwork cp valuenetwork/local_settings{_development,}.py

3. Now restart the server to boot up from your local filesystem with a ready
   database.




To create a production Docker image:
--------------------------------------------------------------------------------

1. Simply run a docker build with the name of your image and you're done:

    docker build -t freedomcoop/valuenetwork:latest .
