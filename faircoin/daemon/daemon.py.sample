#!/usr/bin/env python

import time, sys, socket, os
import threading
import urllib2
import json
import Queue
import sqlite3
import urllib
import logging

import electrumfair
from electrumfair import util
from electrumfair.util import NotEnoughFunds
from electrumfair.bitcoin import TYPE_ADDRESS
electrumfair.set_verbosity(True)

import ConfigParser
config = ConfigParser.ConfigParser()
config.read("daemon.conf")

my_password = config.get('main','password')
my_host = config.get('main','host')
my_port = config.getint('main','port')

wallet_path = config.get('electrum','wallet_path')
password = config.get('electrum', 'password')
default_fee = int(config.getint('network','fee') / 1000 ) # fee per byte in satohis

stopping = False

logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s')

def fee():
    # TODO: test to ask for current fee rate instead of conf value with:
    # return wallet.relayfee()
    return default_fee

def do_stop(password):
    global stopping
    stopping = True
    logging.debug("Stopping")
    return "ok"

def send_command(cmd, params):
    import jsonrpclib
    server = jsonrpclib.Server('http://%s:%d'%(my_host, my_port))
    try:
        f = getattr(server, cmd)
    except socket.error:
        logging.error("Can not connect to the server.")
        return 1

    try:
        out = f(*params)
    except socket.error:
        logging.error("Can not send the command")
        return 1

    return 0

# Return True if this daemon is running.
def daemon_is_up():
    return True

#Check if it is connected to the electum network
def is_connected():
    return network.is_connected()

#check if an address is valid
def is_valid(address):
    return cmd_wallet.validateaddress(address)

#check if an address is from the wallet
def is_mine(address):
    res =  wallet.is_mine(address)
    logging.debug("Is mine %s %s" %(address, res))
    return { "result" : res }

# create new address for users or any other entity
def new_fair_address(entity_id, entity = 'generic'):
    """ Return a new address labeled or False if there's no network connection.
    The label is for debugging proposals. It's like 'entity: id'
    We can label like "user: 213" or "user: pachamama" or "order: 67".
    """
    while network.is_connected():
        new_address = wallet.create_new_address(False)
        check_label = wallet.get_label(new_address)
        check_history = wallet.get_address_history(new_address)
        if not check_label and not check_history:
            wallet.set_label(new_address, entity + ': ' + str(entity_id))
            logging.debug("New address: %s - %s" %(new_address, entity_id))
            return new_address
    return False

# get the balance for a determined address
# Returns a tupla with 3 values: Confirmed, Unmature, Unconfirmed
def get_address_balance(address):
    bal = wallet.get_addr_balance(address)
    logging.debug("Address : %s Balance : %s " %(address, bal))
    print bal
    return bal

#read the history of an address
def get_address_history(address):
    history = wallet.get_address_history(address)
    #logging.debug("Address : %s History : \n%s " %(address, history))
    return history

# make a transfer from an adress of the wallet
def make_transaction_from_address(address_origin, address_end, amount):
    logging.debug("Trying broadcast transaction\n       Origin : %s\n       End    : %s\n       Amount : %s" %(address_origin, address_end, amount))
    # Validate inputs
    if not is_valid(address_end):
        logging.error("The address %s is not a valid faircoin address" %address_end)
        return False
    if not is_mine(address_origin):
        logging.error("The address %s does not belong to this wallet" %address_origin)
        return False
    if amount > 0:
        output = [(TYPE_ADDRESS, address_end, amount)]
    else:
        logging.error("Amount negative: %d" %(amount) )
        return False
    # Get utxos for address
    logging.debug("get utxo")
    inputs = [address_origin]
    coins = wallet.get_spendable_coins(domain = inputs)
    config = electrumfair.SimpleConfig()
    # Build and sign tx
    logging.debug("build")
    try:
        tx = wallet.make_unsigned_transaction(coins, output, config, change_addr=address_origin)
    except NotEnoughFunds:
        logging.error("Not enough funds confirmed to make the transaction. Requested Amount : %s " %amount)
        logging.error("Confirmed : %s -- Unconfirmed: %s -- Unmature : %s " %wallet.get_addr_balance(address_origin))
        return False
    logging.debug("sign")
    wallet.sign_transaction(tx, password)
    # Broadcast tx
    logging.debug("broadcast")
    rec_tx_state, rec_tx_out = network.broadcast(tx, 30)
    if rec_tx_state:
        logging.info("SUCCESS. The transaction %s has been broadcasted." %rec_tx_out)
        return rec_tx_out, rec_tx_state
    else:
        logging.error("Sending %s fairs to the address %s\n%s" %(amount, address_end, rec_tx_out))
        return False

def get_confirmations(tx):
    """Return the number of confirmations of a monitored transaction
    and the timestamp of the last confirmation (or None if not confirmed)."""
    height, conf, timestamp = wallet.get_tx_height(tx)
    return conf, timestamp

def get_transaction(tx_hash):
    serialized_tx = network.synchronous_get(('blockchain.transaction.get', [tx_hash]))
    transaction = electrumfair.Transaction(serialized_tx)
    raw_tx = transaction.deserialize()
    tx_hash, status, label, can_broadcast, can_bump, amount, fee, height, conf,\
        timestamp, exp_n = wallet.get_tx_info(transaction)
    raw_tx['time'] = timestamp
    return raw_tx

def import_key(privkey, entity_id, entity = 'generic'):
    logging.info("trying importing key")
    try:
        address = wallet.import_key(privkey, password)
    except Exception as e:
        logging.error("ERROR importing key %s" %(e))
        return 'ERROR', str(e)
    logging.info("import_key addres generated %s" %(address))
    try:
        wallet.set_label(address, entity + ': ' + str(entity_id))
    except:
        pass
    wallet.import_address(address)
    wallet.synchronize()
    return 'ok', address

def add_address(add):
    wallet.add_address(add)
    return 'ok'

def get_unused_address(db_addresses):
    wallet_addresses = wallet.get_unused_addresses()
    for add in wallet_addresses:
       #logging.info("check address: %s" %add)
       if add not in db_addresses:
           logging.info("get_unused_address: %s" %add)
           return add
    logging.info("Can not find an unused address, generate one")
    return False

def get_unused_address_from_file(fname):
    with open(fname) as f:
        addresses = f.read().splitlines()
    return get_unused_address(addresses)

if __name__ == '__main__':

    if len(sys.argv) > 1:
        cmd = sys.argv[1]
        params = sys.argv[2:]
        ret = send_command(cmd, params)
        sys.exit(ret)
    logging.debug("---------------------------------")
    logging.debug("Starting electrum...")
    out_queue = Queue.Queue()
    c = electrumfair.SimpleConfig()
    network = electrumfair.Network(c)
    network.start()

    # wait until connected
    while network.is_connecting():
        time.sleep(0.1)
    if not network.is_connected():
        print_msg("daemon is not connected")
        sys.exit(1)

    storage = electrumfair.WalletStorage(wallet_path)
    if not storage.file_exists:
        logging.error("The wallet cannot be found in path " + wallet_path + ". Exiting.")
        sys.exit(1)
    wallet = electrumfair.Wallet(storage)
    wallet.start_threads(network)
    cmd_wallet = electrumfair.commands.Commands(c, wallet, network)

    # server thread
    from jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer
    server = SimpleJSONRPCServer(( my_host, my_port))
    server.register_function(fee, 'fee')
    server.register_function(do_stop, 'stop')
    server.register_function(is_connected,'is_connected')
    server.register_function(daemon_is_up,'daemon_is_up')
    server.register_function(get_confirmations,'get_confirmations')
    server.register_function(get_transaction,'get_transaction')
    server.register_function(new_fair_address,'new_fair_address')
    server.register_function(make_transaction_from_address,'make_transaction_from_address')
    server.register_function(is_mine,'is_mine')
    server.register_function(is_valid,'is_valid')
    server.register_function(get_address_balance,'get_address_balance')
    server.register_function(get_address_history,'get_address_history')
    server.register_function(import_key,'import_key')
    server.register_function(add_address,'add_address')
    server.register_function(get_unused_address,'get_unused_address')
    server.register_function(get_unused_address_from_file,'get_unused_address_from_file')
    server.socket.settimeout(1)

    while not stopping:
        try:
            server.handle_request()
        except socket.timeout:
            continue
