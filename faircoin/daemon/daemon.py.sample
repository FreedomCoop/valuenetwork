#!/usr/bin/env python

import time, sys, socket, os
import threading
import urllib2
import json
import Queue
import sqlite3
import urllib
import logging

import electrumfair
from electrumfair import util
from electrumfair.util import NotEnoughFunds
electrumfair.set_verbosity(True)

import ConfigParser
config = ConfigParser.ConfigParser()
config.read("daemon.conf")

my_password = config.get('main','password')
my_host = config.get('main','host')
my_port = config.getint('main','port')

wallet_path = config.get('electrum','wallet_path')
password = config.get('electrum', 'password')
fee_rate = config.getint('network','fee')

stopping = False

logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s')

def fee():
    return fee_rate

def do_stop(password):
    global stopping
    #if password != my_password:
    #    return "wrong password"
    stopping = True
    logging.debug("Stopping")
    return "ok"

def send_command(cmd, params):
    import jsonrpclib
    server = jsonrpclib.Server('http://%s:%d'%(my_host, my_port))
    try:
        f = getattr(server, cmd)
    except socket.error:
        logging.error("Can not connect to the server.")
        return 1

    try:
        out = f(*params)
    except socket.error:
        logging.error("Can not send the command")
        return 1

    #logging.debug("sending : %s" %json.dumps(out, indent=4))
    return 0

# Return True if this daemon is running.
def daemon_is_up():
    return True

#Check if it is connected to the electum network
def is_connected():
    return network.is_connected()

#check if an address is valid
def is_valid(address):
    return cmd_wallet.validateaddress(address)

#check if an address is from the wallet
def is_mine(address):
    return wallet.is_mine(address)

# create new address for users or any other entity
def new_fair_address(entity_id, entity = 'generic'):
    """ Return a new address labeled or False if there's no network connection.
    The label is for debugging proposals. It's like 'entity: id'
    We can label like "user: 213" or "user: pachamama" or "order: 67".
    """
    while network.is_connected():
        new_address = wallet.create_new_address(False)
        callback = lambda response: logging.debug(util.json_encode(response.get('result')))
        network.send([('blockchain.address.subscribe',[address])], callback)
        check_label = wallet.get_label(new_address)
        check_history = cmd_wallet.getaddresshistory(new_address)
        # It checks if address is labeled or has history yet, a gap limit protection.
        # This can be removed when we have good control of gap limit.
        if not check_label[0] and not check_history:
            wallet.set_label(new_address, entity + ': ' + str(entity_id))
            return new_address
    return False

# get the balance for a determined address
# Returns a tupla with 3 values: Confirmed, Unmature, Unconfirmed
def get_address_balance(address):
    bal = wallet.get_addr_balance(address)
    #logging.debug("Address : %s Balance : %s " %(address, bal))
    return bal

#read the history of an address
def get_address_history(address):
    return wallet.get_address_history(address)

# make a transfer from an adress of the wallet
def make_transaction_from_address(address_origin, address_end, amount):
    logging.debug("Trying broadcast transaction\n       Origin : %s\n       End    : %s\n       Amount : %s" %(address_origin, address_end, amount))
    if not is_valid(address_end):
        logging.error("The address %s is not a valid faircoin address" %address_end)
        return False
    if not is_mine(address_origin):
        logging.error("The address %s does not belong to this wallet" %address_origin)
        return False
    # Fix old address generated, can be removed on new database
    wallet.add_address(address_origin)
    callback = lambda response: logging.debug(util.json_encode(response.get('result')))
    network.send([('blockchain.address.subscribe',[address])], callback)
    inputs = [address_origin]
    coins = wallet.get_spendable_coins(domain = inputs)
    # The fee is calculated in make_unsigned_transaction from fee_rate and size.
    amount_total = int(amount)

    if amount_total > 0:
        output = [('address', address_end, int(amount_total))]
    else:
        logging.error("Amount negative: %d" %(amount_total) )
        return False
    try:
        tx = wallet.make_unsigned_transaction(coins, output, change_addr=address_origin)
    except NotEnoughFunds:
        logging.error("Not enough funds confirmed to make the transaction. Requested Amount : %s " %amount_total)
        logging.error("Confirmed : %s -- Unconfirmed: %s -- Unmature : %s " %wallet.get_addr_balance(address_origin))
        return False
    fee = tx.get_fee()
    wallet.sign_transaction(tx, password)
    rec_tx_state, rec_tx_out = network.broadcast(tx,60)
    if rec_tx_state:
        logging.info("SUCCESS. The transaction %s has been broadcasted." %rec_tx_out)
        return rec_tx_out, fee
    else:
         logging.error("Sending %s fairs to the address %s" %(amount_total, address_end ) )
         return False

def get_confirmations(tx):
    """Return the number of confirmations of a monitored transaction
    and the timestamp of the last confirmation (or None if not confirmed)."""
    return wallet.get_confirmations(tx)

def get_transaction(tx_hash):
    raw_transaction = cmd_wallet.gettransaction(tx_hash)
    transaction = raw_transaction.deserialize()
    return transaction

def import_key(privkey, entity_id, entity = 'generic'):
    try:
        address = wallet.import_key(privkey, password)
    except Exception as e:
        return 'ERROR', str(e)
    try:
        wallet.set_label(address, entity + ': ' + str(entity_id))
    except:
        pass

    return 'ok', address

if __name__ == '__main__':

    if len(sys.argv) > 1:
        cmd = sys.argv[1]
        params = sys.argv[2:]
        ret = send_command(cmd, params)
        sys.exit(ret)
    logging.debug("---------------------------------")
    logging.debug("Starting electrum...")
    out_queue = Queue.Queue()
    # start network
    c = electrumfair.SimpleConfig()
    network = electrumfair.Network(c)
    network.start()

    # wait until connected
    while network.is_connecting():
        time.sleep(0.1)
    if not network.is_connected():
        print_msg("daemon is not connected")
        sys.exit(1)

    storage = electrumfair.WalletStorage(wallet_path)
    if not storage.file_exists:
        logging.error("The wallet cannot be found in path " + wallet_path + ". Exiting.")
        sys.exit(1)
    wallet = electrumfair.Wallet(storage)
    wallet.start_threads(network)
    cmd_wallet = electrumfair.commands.Commands(c, wallet, network)

    # server thread
    from jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer
    server = SimpleJSONRPCServer(( my_host, my_port))
    server.register_function(fee, 'fee')
    server.register_function(do_stop, 'stop')
    server.register_function(is_connected,'is_connected')
    server.register_function(daemon_is_up,'daemon_is_up')
    server.register_function(get_confirmations,'get_confirmations')
    server.register_function(get_transaction,'get_transaction')
    server.register_function(new_fair_address,'new_fair_address')
    server.register_function(make_transaction_from_address,'make_transaction_from_address')
    server.register_function(is_mine,'is_mine')
    server.register_function(is_valid,'is_valid')
    server.register_function(get_address_balance,'get_address_balance')
    server.register_function(import_key,'import_key')
    server.socket.settimeout(1)

    while not stopping:
        try:
            server.handle_request()
        except socket.timeout:
            continue
