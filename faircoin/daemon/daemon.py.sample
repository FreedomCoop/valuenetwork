#!/usr/bin/python3

import time, sys, socket, os
import threading
import urllib
import urllib.request
import json
import logging

import electrumfair
from electrumfair import util
from electrumfair import Transaction
from electrumfair.util import NotEnoughFunds
from electrumfair.bitcoin import TYPE_ADDRESS
electrumfair.set_verbosity(True)

import configparser
config = configparser.ConfigParser()
config.read("daemon.conf")

my_password = config.get('main','password')
my_host = config.get('main','host')
my_port = config.getint('main','port')

wallet_path = config.get('electrum','wallet_path')
password = config.get('electrum', 'password')

stopping = False

logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s')

def do_stop(password):
    global stopping
    stopping = True
    logging.debug("Stopping")
    return "ok"

def send_command(cmd, params):
    import jsonrpclib
    server = jsonrpclib.Server('http://%s:%d'%(my_host, my_port))
    try:
        f = getattr(server, cmd)
    except socket.error:
        logging.error("Can not connect to the server.")
        return 1

    try:
        out = f(*params)
    except socket.error:
        logging.error("Can not send the command")
        return 1

    return 0

# Return True if this daemon is running.
def daemon_is_up():
    return True

#Check if it is connected to the electum network
def is_connected():
    return network.is_connected()

#check if an address is valid
def is_valid(address):
    return cmd_wallet.validateaddress(address)

#check if an address is from the wallet
def is_mine(address):
    res =  wallet.is_mine(address)
    #logging.debug("Is mine %s %s" %(address, res))
    return res

# create new address for users or any other entity. DEPRECATED, use get_unused_address. Use this if not unused in wallet only
def new_fair_address(entity_id, entity = 'generic'):
    """ Return a new address labeled or False if there's no network connection.
    The label is for debugging proposals. It's like 'entity: id'
    We can label like "user: 213" or "user: pachamama" or "order: 67".

    while network.is_connected():
        new_address = wallet.create_new_address(False)
        check_label = wallet.get_label(new_address)
        check_history = wallet.get_address_history(new_address)
        if not check_label and not check_history:
            wallet.set_label(new_address, entity + ': ' + str(entity_id))
            logging.debug("New address: %s - %s" %(new_address, entity_id))
            return new_address
    """
    logging.debug("Old method new_fair_address called")
    return False

# get the balance for a determined address
# Returns a tupla with 3 values: Confirmed, Unmature, Unconfirmed
def get_address_balance(address):
    bal = wallet.get_addr_balance(address)
    #logging.debug("Address : %s Balance : %s " %(address, bal))
    return bal

#read the history of an address
def get_address_history(address):
    history = wallet.get_address_history(address)
    return history

# make a transfer from an adress of the wallet
def make_transaction_from_address(address_origin, address_end, amount, minus_fee=False):
    logging.debug("Trying broadcast transaction. Minus fee: %s\n       Origin : %s\n       End    : %s\n       Amount : %s" %(minus_fee, address_origin, address_end, amount))
    # Validate inputs
    if not is_valid(address_end):
        logging.error("The address %s is not a valid faircoin address" %address_end)
        return False
    if not is_mine(address_origin):
        logging.error("The address %s does not belong to this wallet" %address_origin)
        return False
    if amount > 0:
        if minus_fee:
            fee = estimate_fee(address_origin, address_end, amount)
            logging.debug("Estimated fee: %s" %fee)
            if not fee:
                 logging.error("Insufficient funds")
                 return "ERROR: Insufficient funds"
            tx = build_tx(address_origin, address_end, amount - fee)
        else:
            tx = build_tx(address_origin, address_end, amount)
    else:
        logging.error("Amount negative: %d" %(amount) )
        return False

    if not tx:
        msg = ("ERROR: Can not build the tx")
        logging.error(msg)
        if not minus_fee:
            logging.warning("Trying to resend the tx substracting the fee.")
            msg = make_transaction_from_address(address_origin, address_end, amount, True)
        return msg
    # Broadcast tx
    rec_tx_state, rec_tx_out = network.broadcast(tx, 30)
    if rec_tx_state:
        logging.info("SUCCESS. The transaction %s has been broadcasted." %rec_tx_out)
        return rec_tx_out, rec_tx_state
    else:
        msg = ("ERROR: can not send %s fair to address %s\n%s" %(amount, address_end, rec_tx_out))
        logging.error(msg)
        return msg

def build_tx(origin, destination, amount):
    inputs = [origin]
    coins = wallet.get_spendable_coins(inputs, config)
    out = [(TYPE_ADDRESS, destination, amount)]
    try:
        tx = wallet.make_unsigned_transaction(coins, out, config, change_addr=origin)
    except NotEnoughFunds:
        logging.error("Not enough funds confirmed to make the transaction. Requested Amount : %s " %amount)
        logging.error("Confirmed : %s -- Unconfirmed: %s -- Unmature : %s " %wallet.get_addr_balance(origin))
        return False
    except Exception as e:
        logging.error("Can not build the tx: %s" %e)
        return e
    wallet.sign_transaction(tx, password)
    return tx

def estimate_fee(origin, destination, amount):
    logging.debug("estimate_fee")
    logging.debug("origin: %s" %origin)
    qty = amount - 1000000 # Reduce the amount because fails to build if is the max amount. Limit the minimum capable to send due to negative amount and max due to the size limit on fee
    tx = build_tx(origin, destination, qty)
    if tx:
        return config.estimate_fee(tx.estimated_size())
    else:
       return False

def get_confirmations(tx):
    """Return the number of confirmations of a monitored transaction
    and the timestamp of the last confirmation (or None if not confirmed)."""
    height, conf, timestamp = wallet.get_tx_height(tx)
    return conf, timestamp

def get_transaction(tx_hash):
    serialized_tx = network.synchronous_get(('blockchain.transaction.get', [tx_hash]))
    transaction = electrumfair.Transaction(serialized_tx)
    raw_tx = transaction.deserialize()
    tx_hash, status, label, can_broadcast, can_bump, amount, fee, height, conf,\
        timestamp, exp_n = wallet.get_tx_info(transaction)
    raw_tx['time'] = timestamp
    return raw_tx

def import_key(privkey, entity_id, entity = 'generic'):
    logging.info("trying importing key")
    try:
        address = wallet.import_key(privkey, password)
    except Exception as e:
        logging.error("ERROR importing key %s" %(e))
        return 'ERROR', str(e)
    logging.info("import_key addres generated %s" %(address))
    try:
        wallet.set_label(address, entity + ': ' + str(entity_id))
    except:
        pass
    wallet.import_address(address)
    wallet.synchronize()
    return 'ok', address

def add_address(add):
    wallet.add_address(add)
    return 'ok'

def get_unused_address(db_addresses):
    wallet_addresses = wallet.get_unused_addresses()
    for add in wallet_addresses:
       if add not in db_addresses:
           logging.info("get_unused_address: %s" %add)
           return add
    logging.info("Can not find an unused address, generate one")
    return False

def get_unused_address_from_file(fname):
    with open(fname) as f:
        addresses = f.read().splitlines()
    return get_unused_address(addresses)

def get_unused_addresses():
    return wallet.get_unused_addresses()

def get_address_index(address):
    return wallet.get_address_index(address)


if __name__ == '__main__':

    if len(sys.argv) > 1:
        cmd = sys.argv[1]
        params = sys.argv[2:]
        ret = send_command(cmd, params)
        sys.exit(ret)
    logging.debug("---------------------------------")
    logging.debug("Starting electrum...")
    config = electrumfair.SimpleConfig()
    network = electrumfair.Network(config)
    network.start()

    # wait until connected
    while network.is_connecting():
        time.sleep(0.1)
    if not network.is_connected():
        print("Can not connect with a electrum server")
        sys.exit(1)

    storage = electrumfair.WalletStorage(wallet_path)
    if not storage.file_exists:
        logging.error("The wallet cannot be found in path " + wallet_path + ". Exiting.")
        sys.exit(1)
    wallet = electrumfair.Wallet(storage)
    wallet.start_threads(network)
    cmd_wallet = electrumfair.commands.Commands(config, wallet, network)

    # server thread
    from jsonrpclib.SimpleJSONRPCServer import SimpleJSONRPCServer
    server = SimpleJSONRPCServer(( my_host, my_port))
    server.register_function(do_stop, 'stop')
    server.register_function(is_connected,'is_connected')
    server.register_function(daemon_is_up,'daemon_is_up')
    server.register_function(get_confirmations,'get_confirmations')
    server.register_function(get_transaction,'get_transaction')
    server.register_function(new_fair_address,'new_fair_address')
    server.register_function(make_transaction_from_address,'make_transaction_from_address')
    server.register_function(is_mine,'is_mine')
    server.register_function(is_valid,'is_valid')
    server.register_function(get_address_balance,'get_address_balance')
    server.register_function(get_address_history,'get_address_history')
    server.register_function(import_key,'import_key')
    server.register_function(add_address,'add_address')
    server.register_function(get_unused_address,'get_unused_address')
    server.register_function(get_unused_address_from_file,'get_unused_address_from_file')
    server.register_function(get_unused_addresses,'get_unused_addresses')
    server.register_function(get_address_index,'get_address_index')
    server.socket.settimeout(1)

    while not stopping:
        try:
            server.handle_request()
        except socket.timeout:
            continue
