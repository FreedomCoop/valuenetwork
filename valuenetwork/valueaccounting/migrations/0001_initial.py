# -*- coding: utf-8 -*-


from django.db import models, migrations
import datetime
from decimal import Decimal
import easy_thumbnails.fields
import django.db.models.deletion
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountingReference',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(unique=True, max_length=128, verbose_name='code')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentAssociation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('state', models.CharField(default='active', max_length=12, verbose_name='state', choices=[('active', 'active'), ('inactive', 'inactive'), ('potential', 'potential')])),
            ],
            options={
                'ordering': ('is_associate',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentAssociationType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('identifier', models.CharField(unique=True, max_length=12, verbose_name='identifier')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('plural_name', models.CharField(default='', max_length=128, verbose_name='plural name')),
                ('association_behavior', models.CharField(blank=True, max_length=12, null=True, verbose_name='association behavior', choices=[('supplier', 'supplier'), ('customer', 'customer'), ('member', 'member'), ('child', 'child'), ('custodian', 'custodian'), ('exchange', 'exchange firm'), ('peer', 'peer')])),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('label', models.CharField(max_length=32, null=True, verbose_name='label')),
                ('inverse_label', models.CharField(max_length=40, null=True, verbose_name='inverse label')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentResourceRole',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_contact', models.BooleanField(default=False, verbose_name='is contact')),
                ('owner_percentage', models.IntegerField(null=True, verbose_name='owner percentage')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentResourceRoleType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('is_owner', models.BooleanField(default=False, verbose_name='is owner')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentResourceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('score', models.DecimalField(default=Decimal('0.0'), help_text='the quantity of contributions of this resource type from this agent', verbose_name='score', max_digits=8, decimal_places=2)),
                ('lead_time', models.IntegerField(default=0, help_text='in days', verbose_name='lead time')),
                ('value', models.DecimalField(default=Decimal('0.0'), verbose_name='value', max_digits=8, decimal_places=2)),
                ('value_per_unit', models.DecimalField(default=Decimal('0.0'), verbose_name='value per unit', max_digits=8, decimal_places=2)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('party_type', models.CharField(default='individual', max_length=12, verbose_name='party type', choices=[('individual', 'individual'), ('org', 'organization'), ('network', 'network'), ('team', 'project'), ('community', 'community')])),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('is_context', models.BooleanField(default=False, verbose_name='is context')),
                ('parent', models.ForeignKey(related_name='sub-agents', blank=True, editable=False, to='valueaccounting.AgentType', null=True, verbose_name='parent', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgentUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CachedEventSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('resource_type_rate', models.DecimalField(default=Decimal('1.0'), verbose_name='resource type rate', max_digits=8, decimal_places=2)),
                ('importance', models.DecimalField(default=Decimal('1'), verbose_name='importance', max_digits=3, decimal_places=0)),
                ('reputation', models.DecimalField(default=Decimal('1.00'), verbose_name='reputation', max_digits=8, decimal_places=2)),
                ('quantity', models.DecimalField(default=Decimal('0.0'), verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('value', models.DecimalField(default=Decimal('0.0'), verbose_name='value', max_digits=8, decimal_places=2)),
            ],
            options={
                'ordering': ('agent', 'context_agent', 'resource_type'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('claim_date', models.DateField(verbose_name='claim date')),
                ('value', models.DecimalField(default=Decimal('0.0'), verbose_name='value', max_digits=8, decimal_places=2)),
                ('original_value', models.DecimalField(default=Decimal('0.0'), verbose_name='original value', max_digits=8, decimal_places=2)),
                ('claim_creation_equation', models.TextField(null=True, verbose_name='creation equation', blank=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
            ],
            options={
                'ordering': ('claim_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ClaimEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('claim_event_date', models.DateField(default=datetime.date.today, verbose_name='claim event date')),
                ('value', models.DecimalField(verbose_name='value', max_digits=8, decimal_places=2)),
                ('event_effect', models.CharField(max_length=12, verbose_name='event effect', choices=[('+', 'increase'), ('-', 'decrease')])),
                ('claim', models.ForeignKey(related_name='claim_events', verbose_name='claims', to='valueaccounting.Claim', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('claim_event_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Commitment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('commitment_date', models.DateField(default=datetime.date.today, verbose_name='commitment date')),
                ('start_date', models.DateField(null=True, verbose_name='start date', blank=True)),
                ('due_date', models.DateField(verbose_name='due date')),
                ('finished', models.BooleanField(default=False, verbose_name='finished')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('quantity', models.DecimalField(verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('quality', models.DecimalField(default=Decimal('0'), verbose_name='quality', max_digits=3, decimal_places=0)),
                ('value', models.DecimalField(default=Decimal('0.0'), verbose_name='value', max_digits=8, decimal_places=2)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='commitments_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('due_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name', blank=True)),
                ('url', models.CharField(max_length=255, null=True, verbose_name='url', blank=True)),
                ('distribution_date', models.DateField(verbose_name='distribution date')),
                ('notes', models.TextField(verbose_name='notes', blank=True)),
                ('value_equation_content', models.TextField(null=True, verbose_name='value equation formulas used', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='distributions_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('-distribution_date',),
                'verbose_name_plural': 'distributions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DistributionValueEquation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('distribution_date', models.DateField(verbose_name='distribution date')),
                ('value_equation_content', models.TextField(null=True, verbose_name='value equation formulas used', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EconomicAgent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('nick', models.CharField(help_text='Must be unique, and no more than 32 characters', unique=True, max_length=32, verbose_name='ID')),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('address', models.CharField(max_length=255, verbose_name='address', blank=True)),
                ('email', models.EmailField(max_length=96, null=True, verbose_name='email address', blank=True)),
                ('phone_primary', models.CharField(max_length=32, null=True, verbose_name='primary phone', blank=True)),
                ('phone_secondary', models.CharField(max_length=32, null=True, verbose_name='secondary phone', blank=True)),
                ('latitude', models.FloatField(default=0.0, null=True, verbose_name='latitude', blank=True)),
                ('longitude', models.FloatField(default=0.0, null=True, verbose_name='longitude', blank=True)),
                ('reputation', models.DecimalField(default=Decimal('0.00'), verbose_name='reputation', max_digits=8, decimal_places=2)),
                ('photo', easy_thumbnails.fields.ThumbnailerImageField(upload_to='photos', null=True, verbose_name='photo', blank=True)),
                ('photo_url', models.CharField(max_length=255, verbose_name='photo url', blank=True)),
                ('is_context', models.BooleanField(default=False, verbose_name='is context')),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('created_date', models.DateField(default=datetime.date.today, verbose_name='created date')),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('agent_type', models.ForeignKey(related_name='agents', verbose_name='agent type', to='valueaccounting.AgentType', on_delete=models.CASCADE)),
                ('changed_by', models.ForeignKey(related_name='agents_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='agents_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('nick',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EconomicEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('event_date', models.DateField(verbose_name='event date')),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('quantity', models.DecimalField(verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('quality', models.DecimalField(default=Decimal('0'), verbose_name='quality', max_digits=3, decimal_places=0)),
                ('value', models.DecimalField(default=Decimal('0.0'), verbose_name='value', max_digits=8, decimal_places=2)),
                ('price', models.DecimalField(default=Decimal('0.0'), verbose_name='price', max_digits=8, decimal_places=2)),
                ('is_contribution', models.BooleanField(default=False, verbose_name='is contribution')),
                ('is_to_distribute', models.BooleanField(default=False, verbose_name='is to distribute')),
                ('event_reference', models.CharField(max_length=128, null=True, verbose_name='reference', blank=True)),
                ('digital_currency_tx_hash', models.CharField(verbose_name='digital currency transaction hash', max_length=96, null=True, editable=False, blank=True)),
                ('digital_currency_tx_state', models.CharField(editable=False, choices=[('new', 'New'), ('pending', 'Pending'), ('broadcast', 'Broadcast'), ('confirmed', 'Confirmed')], max_length=12, blank=True, null=True, verbose_name='digital currency transaction hash')),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('accounting_reference', models.ForeignKey(related_name='events', blank=True, to='valueaccounting.AccountingReference', help_text='optional reference to an accounting grouping', null=True, verbose_name='accounting reference', on_delete=models.SET_NULL)),
                ('changed_by', models.ForeignKey(related_name='events_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('commitment', models.ForeignKey(related_name='fulfillment_events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='fulfills commitment', blank=True, to='valueaccounting.Commitment', null=True)),
                ('context_agent', models.ForeignKey(related_name='events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True)),
                ('created_by', models.ForeignKey(related_name='events_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('distribution', models.ForeignKey(related_name='events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='distribution', blank=True, to='valueaccounting.Distribution', null=True)),
            ],
            options={
                'ordering': ('-event_date', '-pk'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EconomicResource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('identifier', models.CharField(max_length=128, verbose_name='identifier', blank=True)),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('quantity', models.DecimalField(default=Decimal('0.00'), verbose_name='quantity', editable=False, max_digits=8, decimal_places=2)),
                ('quality', models.DecimalField(decimal_places=0, default=Decimal('0'), max_digits=3, blank=True, null=True, verbose_name='quality')),
                ('notes', models.TextField(null=True, verbose_name='notes', blank=True)),
                ('photo', easy_thumbnails.fields.ThumbnailerImageField(upload_to='photos', null=True, verbose_name='photo', blank=True)),
                ('photo_url', models.CharField(max_length=255, verbose_name='photo url', blank=True)),
                ('access_rules', models.TextField(null=True, verbose_name='access rules', blank=True)),
                ('digital_currency_address', models.CharField(verbose_name='digital currency address', max_length=96, null=True, editable=False, blank=True)),
                ('value_per_unit', models.DecimalField(default=Decimal('0.00'), verbose_name='value per unit', max_digits=8, decimal_places=2)),
                ('value_per_unit_of_use', models.DecimalField(default=Decimal('0.00'), verbose_name='value per unit of use', max_digits=8, decimal_places=2)),
                ('price_per_unit', models.DecimalField(default=Decimal('0.00'), verbose_name='price per unit', max_digits=8, decimal_places=2)),
                ('created_date', models.DateField(default=datetime.date.today, verbose_name='created date')),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('author', models.ForeignKey(related_name='authored_resources', verbose_name='author', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('changed_by', models.ForeignKey(related_name='resources_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='resources_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('resource_type', 'identifier'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EconomicResourceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='name')),
                ('value_per_unit', models.DecimalField(default=Decimal('0.00'), verbose_name='value per unit', editable=False, max_digits=8, decimal_places=2)),
                ('value_per_unit_of_use', models.DecimalField(default=Decimal('0.00'), verbose_name='value per unit of use', editable=False, max_digits=8, decimal_places=2)),
                ('price_per_unit', models.DecimalField(default=Decimal('0.00'), verbose_name='price per unit', max_digits=8, decimal_places=2)),
                ('substitutable', models.BooleanField(default=True, help_text='Can any resource of this type be substituted for any other resource of this type?', verbose_name='substitutable')),
                ('inventory_rule', models.CharField(default='yes', max_length=5, verbose_name='inventory rule', choices=[('yes', 'Keep inventory'), ('no', 'Not worth it'), ('never', 'Does not apply')])),
                ('behavior', models.CharField(default='other', max_length=12, verbose_name='behavior', choices=[('work', 'Type of Work'), ('account', 'Virtual Account'), ('dig_curr', 'Digital Currency'), ('dig_acct', 'Digital Currency Address'), ('dig_wallet', 'Digital Currency Wallet'), ('other', 'Other')])),
                ('photo', easy_thumbnails.fields.ThumbnailerImageField(upload_to='photos', null=True, verbose_name='photo', blank=True)),
                ('photo_url', models.CharField(max_length=255, verbose_name='photo url', blank=True)),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('accounting_reference', models.ForeignKey(related_name='resource_types', blank=True, to='valueaccounting.AccountingReference', help_text='optional reference to an external account', null=True, verbose_name='accounting reference', on_delete=models.SET_NULL)),
                ('changed_by', models.ForeignKey(related_name='resource_types_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='resource_types_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('parent', models.ForeignKey(related_name='children', verbose_name='parent', blank=True, to='valueaccounting.EconomicResourceType', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'resource type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('label', models.CharField(max_length=32, verbose_name='label')),
                ('inverse_label', models.CharField(max_length=40, verbose_name='inverse label', blank=True)),
                ('relationship', models.CharField(default='in', max_length=12, verbose_name='relationship', choices=[('in', 'input'), ('consume', 'consume'), ('use', 'use'), ('out', 'output'), ('cite', 'citation'), ('work', 'work'), ('todo', 'todo'), ('pay', 'payment'), ('receive', 'receipt'), ('expense', 'expense'), ('cash', 'cash input'), ('resource', 'resource contribution'), ('receivecash', 'cash receipt'), ('shipment', 'shipment'), ('distribute', 'distribution'), ('adjust', 'adjust'), ('disburse', 'disburses cash')])),
                ('related_to', models.CharField(default='process', max_length=12, verbose_name='related to', choices=[('process', 'process'), ('agent', 'agent'), ('exchange', 'exchange'), ('distribution', 'distribution')])),
                ('resource_effect', models.CharField(max_length=12, verbose_name='resource effect', choices=[('+', 'increase'), ('-', 'decrease'), ('+-', 'adjust'), ('x', 'transfer'), ('=', 'no effect'), ('<', 'failure'), ('+~', 'create to change'), ('>~', 'to be changed'), ('~>', 'change')])),
                ('unit_type', models.CharField(blank=True, max_length=12, verbose_name='unit type', choices=[('area', 'area'), ('length', 'length'), ('quantity', 'quantity'), ('time', 'time'), ('value', 'value'), ('volume', 'volume'), ('weight', 'weight'), ('ip', 'ip'), ('percent', 'percent')])),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
            ],
            options={
                'ordering': ('label',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name', blank=True)),
                ('url', models.CharField(max_length=255, null=True, verbose_name='url', blank=True)),
                ('start_date', models.DateField(verbose_name='start date')),
                ('notes', models.TextField(verbose_name='notes', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='exchanges_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('context_agent', models.ForeignKey(related_name='exchanges', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='exchanges_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('customer', models.ForeignKey(related_name='exchanges_as_customer', verbose_name='customer', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('-start_date',),
                'verbose_name_plural': 'exchanges',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ExchangeType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='exchange_types_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='exchange_types_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Facet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=32, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FacetValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.CharField(max_length=32, verbose_name='value')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('facet', models.ForeignKey(related_name='values', verbose_name='facet', to='valueaccounting.Facet', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('facet', 'value'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('quantity', models.DecimalField(default=Decimal('0.00'), verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='features_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='features_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('event_type', models.ForeignKey(related_name='features', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Help',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('page', models.CharField(unique=True, max_length=16, verbose_name='page', choices=[('agent', 'Agent'), ('agents', 'All Agents'), ('all_work', 'All Work'), ('create_distribution', 'Create Distribution'), ('create_exchange', 'Create Exchange'), ('create_sale', 'Create Sale'), ('demand', 'Demand'), ('ed_asmbly_recipe', 'Edit Assembly Recipes'), ('ed_wf_recipe', 'Edit Workflow Recipes'), ('exchange', 'Exchange'), ('home', 'Home'), ('inventory', 'Inventory'), ('labnotes', 'Labnotes Form'), ('locations', 'Locations'), ('associations', 'Maintain Associations'), ('my_work', 'My Work'), ('non_production', 'Non-production time logging'), ('projects', 'Organization'), ('plan_from_recipe', 'Plan from recipe'), ('plan_from_rt', 'Plan from Resource Type'), ('plan_fr_rt_rcpe', 'Plan from Resource Type Recipe'), ('process', 'Process'), ('process_select', 'Process Selections'), ('recipes', 'Recipes'), ('resource_types', 'Resource Types'), ('resource_type', 'Resource Type'), ('supply', 'Supply'), ('non_proc_log', 'Non-process Logging (Work)'), ('proc_log', 'Process Logging (Work)'), ('profile', 'My Profile (Work)'), ('my_history', 'My History (Work)'), ('work_map', 'Map (Work)'), ('work_home', 'Home (Work)'), ('process_work', 'Process (Work)'), ('work_timer', 'Work Now (Work)')])),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
            ],
            options={
                'ordering': ('page',),
                'verbose_name_plural': 'help',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='HomePageLayout',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('banner', models.TextField(help_text='HTML text for top Banner', null=True, verbose_name='banner', blank=True)),
                ('use_work_panel', models.BooleanField(default=False, help_text='Work panel, if used, will be Panel 1', verbose_name='use work panel')),
                ('work_panel_headline', models.TextField(null=True, verbose_name='work panel headline', blank=True)),
                ('use_needs_panel', models.BooleanField(default=False, help_text='Needs panel, if used, will be Panel 2', verbose_name='use needs panel')),
                ('needs_panel_headline', models.TextField(null=True, verbose_name='needs panel headline', blank=True)),
                ('use_creations_panel', models.BooleanField(default=False, help_text='Creations panel, if used, will be Panel 3', verbose_name='use creations panel')),
                ('creations_panel_headline', models.TextField(null=True, verbose_name='creations panel headline', blank=True)),
                ('panel_1', models.TextField(help_text='HTML text for Panel 1', null=True, verbose_name='panel 1', blank=True)),
                ('panel_2', models.TextField(help_text='HTML text for Panel 2', null=True, verbose_name='panel 2', blank=True)),
                ('panel_3', models.TextField(help_text='HTML text for Panel 3', null=True, verbose_name='panel 3', blank=True)),
                ('footer', models.TextField(null=True, verbose_name='footer', blank=True)),
            ],
            options={
                'verbose_name_plural': 'home page layout',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IncomeEventDistribution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('distribution_date', models.DateField(verbose_name='distribution date')),
                ('quantity', models.DecimalField(default=Decimal('0.0'), verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('distribution', models.ForeignKey(related_name='cash_receipts', default=None, blank=True, to='valueaccounting.Exchange', null=True, verbose_name='distribution', on_delete=models.SET_NULL)),
                ('distribution_ref', models.ForeignKey(related_name='income_events', verbose_name='distribution', blank=True, to='valueaccounting.Distribution', null=True, on_delete=models.SET_NULL)),
                ('income_event', models.ForeignKey(related_name='distributions', verbose_name='income event', to='valueaccounting.EconomicEvent', on_delete=models.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('address', models.CharField(max_length=255, blank=True)),
                ('latitude', models.FloatField(default=0.0, null=True, blank=True)),
                ('longitude', models.FloatField(default=0.0, null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='options_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('component', models.ForeignKey(related_name='options', verbose_name='component', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE)),
                ('created_by', models.ForeignKey(related_name='options_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('feature', models.ForeignKey(related_name='options', verbose_name='feature', to='valueaccounting.Feature', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('component',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order_type', models.CharField(default='customer', max_length=12, verbose_name='order type', choices=[('customer', 'Customer order'), ('rand', 'Work order'), ('holder', 'Placeholder order')])),
                ('name', models.CharField(help_text='appended to process labels for Work orders', max_length=255, verbose_name='name', blank=True)),
                ('order_date', models.DateField(default=datetime.date.today, verbose_name='order date')),
                ('due_date', models.DateField(verbose_name='due date')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='orders_changed', verbose_name='changed by', blank=True, to=settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='orders_created', verbose_name='created by', blank=True, to=settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)),
                ('provider', models.ForeignKey(related_name='sales_orders', verbose_name='provider', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('receiver', models.ForeignKey(related_name='purchase_orders', verbose_name='receiver', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('due_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PatternFacetValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('event_type', models.ForeignKey(related_name='patterns', verbose_name='event type', to='valueaccounting.EventType', help_text='consumed means gone, used means re-usable', on_delete=models.CASCADE)),
                ('facet_value', models.ForeignKey(related_name='patterns', verbose_name='facet value', to='valueaccounting.FacetValue', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('pattern', 'event_type', 'facet_value'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PatternUseCase',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(null=True, verbose_name='end date', blank=True)),
                ('started', models.DateField(null=True, verbose_name='started', blank=True)),
                ('finished', models.BooleanField(default=False, verbose_name='finished')),
                ('notes', models.TextField(verbose_name='notes', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='processes_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('context_agent', models.ForeignKey(related_name='processes', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='processes_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('parent', models.ForeignKey(related_name='sub_processes', blank=True, editable=False, to='valueaccounting.Process', null=True, verbose_name='parent', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('-end_date',),
                'verbose_name_plural': 'processes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProcessPattern',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=32, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProcessType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('url', models.CharField(max_length=255, verbose_name='url', blank=True)),
                ('estimated_duration', models.IntegerField(default=0, help_text='in minutes, e.g. 3 hours = 180', verbose_name='estimated duration')),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='process_types_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('context_agent', models.ForeignKey(related_name='process_types', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='process_types_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('parent', models.ForeignKey(related_name='sub_process_types', blank=True, editable=False, to='valueaccounting.ProcessType', null=True, verbose_name='parent', on_delete=models.SET_NULL)),
                ('process_pattern', models.ForeignKey(related_name='process_types', verbose_name='process pattern', blank=True, to='valueaccounting.ProcessPattern', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProcessTypeResourceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.DecimalField(default=Decimal('0.00'), verbose_name='quantity', max_digits=8, decimal_places=2)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='ptrts_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='ptrts_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('event_type', models.ForeignKey(related_name='process_resource_types', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE)),
                ('process_type', models.ForeignKey(related_name='resource_types', verbose_name='process type', to='valueaccounting.ProcessType', on_delete=models.CASCADE)),
                ('resource_type', models.ForeignKey(related_name='process_types', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE)),
                ('stage', models.ForeignKey(related_name='commitmenttypes_at_stage', verbose_name='stage', blank=True, to='valueaccounting.ProcessType', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('resource_type',),
                'verbose_name': 'commitment type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Reciprocity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('reciprocity_date', models.DateField(default=datetime.date.today, verbose_name='reciprocity date')),
                ('initiating_commitment', models.ForeignKey(related_name='initiated_commitments', verbose_name='initiating commitment', to='valueaccounting.Commitment', on_delete=models.CASCADE)),
                ('reciprocal_commitment', models.ForeignKey(related_name='reciprocal_commitments', verbose_name='reciprocal commitment', to='valueaccounting.Commitment', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('reciprocity_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceState',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceTypeFacetValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('facet_value', models.ForeignKey(related_name='resource_types', verbose_name='facet value', to='valueaccounting.FacetValue', on_delete=models.CASCADE)),
                ('resource_type', models.ForeignKey(related_name='facets', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('resource_type', 'facet_value'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceTypeList',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('context_agent', models.ForeignKey(related_name='lists', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceTypeListElement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('default_quantity', models.DecimalField(default=Decimal('1.0'), verbose_name='default quantity', max_digits=8, decimal_places=2)),
                ('resource_type', models.ForeignKey(related_name='lists', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE)),
                ('resource_type_list', models.ForeignKey(related_name='list_elements', verbose_name='resource type list', to='valueaccounting.ResourceTypeList', on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('resource_type_list', 'resource_type'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResourceTypeSpecialPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('identifier', models.CharField(max_length=128, verbose_name='identifier')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('price_per_unit', models.DecimalField(default=Decimal('0.00'), verbose_name='price per unit', max_digits=8, decimal_places=2)),
                ('resource_type', models.ForeignKey(related_name='prices', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE)),
                ('stage', models.ForeignKey(related_name='price_at_stage', verbose_name='stage', blank=True, to='valueaccounting.ProcessType', null=True, on_delete=models.SET_NULL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SelectedOption',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('commitment', models.ForeignKey(related_name='options', verbose_name='commitment', to='valueaccounting.Commitment', on_delete=models.CASCADE)),
                ('option', models.ForeignKey(related_name='commitments', verbose_name='option', to='valueaccounting.Option', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('commitment', 'option'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name', blank=True)),
                ('transfer_date', models.DateField(verbose_name='transfer date')),
                ('notes', models.TextField(verbose_name='notes', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('slug', models.SlugField(verbose_name='Page name', editable=False)),
                ('changed_by', models.ForeignKey(related_name='transfers_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('context_agent', models.ForeignKey(related_name='transfers', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='transfers_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('exchange', models.ForeignKey(related_name='transfers', verbose_name='exchange', blank=True, to='valueaccounting.Exchange', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('transfer_date',),
                'verbose_name_plural': 'transfers',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TransferType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('sequence', models.IntegerField(default=0, verbose_name='sequence')),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('is_contribution', models.BooleanField(default=False, verbose_name='is contribution')),
                ('is_to_distribute', models.BooleanField(default=False, verbose_name='is to distribute')),
                ('is_reciprocal', models.BooleanField(default=False, verbose_name='is reciprocal')),
                ('can_create_resource', models.BooleanField(default=False, verbose_name='can create resource')),
                ('is_currency', models.BooleanField(default=False, verbose_name='is currency')),
                ('give_agent_is_context', models.BooleanField(default=False, verbose_name='give agent is context')),
                ('receive_agent_is_context', models.BooleanField(default=False, verbose_name='receive agent is context')),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='transfer_types_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='transfer_types_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('exchange_type', models.ForeignKey(related_name='transfer_types', verbose_name='exchange type', to='valueaccounting.ExchangeType', on_delete=models.CASCADE)),
                ('give_agent_association_type', models.ForeignKey(related_name='transfer_types_give', verbose_name='give agent association type', blank=True, to='valueaccounting.AgentAssociationType', null=True, on_delete=models.SET_NULL)),
                ('receive_agent_association_type', models.ForeignKey(related_name='transfer_types_receive', verbose_name='receive agent association type', blank=True, to='valueaccounting.AgentAssociationType', null=True, on_delete=models.SET_NULL)),
            ],
            options={
                'ordering': ('sequence',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TransferTypeFacetValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('facet_value', models.ForeignKey(related_name='transfer_types', verbose_name='facet value', to='valueaccounting.FacetValue', on_delete=models.CASCADE)),
                ('transfer_type', models.ForeignKey(related_name='facet_values', verbose_name='transfer type', to='valueaccounting.TransferType', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('transfer_type', 'facet_value'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('unit_type', models.CharField(max_length=12, verbose_name='unit type', choices=[('area', 'area'), ('length', 'length'), ('quantity', 'quantity'), ('time', 'time'), ('value', 'value'), ('volume', 'volume'), ('weight', 'weight'), ('ip', 'ip'), ('percent', 'percent')])),
                ('abbrev', models.CharField(max_length=8, verbose_name='abbreviation')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('symbol', models.CharField(max_length=1, verbose_name='symbol', blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UseCase',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('identifier', models.CharField(max_length=12, verbose_name='identifier')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('restrict_to_one_pattern', models.BooleanField(default=False, verbose_name='restrict_to_one_pattern')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UseCaseEventType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('event_type', models.ForeignKey(related_name='use_cases', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE)),
                ('use_case', models.ForeignKey(related_name='event_types', verbose_name='use case', to='valueaccounting.UseCase', on_delete=models.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ValueEquation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name='name', blank=True)),
                ('description', models.TextField(null=True, verbose_name='description', blank=True)),
                ('percentage_behavior', models.CharField(default='straight', help_text='Remaining percentage uses the % of the remaining amount to be distributed.  Straight percentage uses the % of the total distribution amount.', max_length=12, verbose_name='percentage behavior', choices=[('remaining', 'Remaining percentage'), ('straight', 'Straight percentage')])),
                ('live', models.BooleanField(default=False, help_text='Make this value equation available for use in real distributions.', verbose_name='live')),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('context_agent', models.ForeignKey(related_name='value_equations', verbose_name='context agent', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE)),
                ('created_by', models.ForeignKey(related_name='value_equations_created', verbose_name='created by', blank=True, to=settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ValueEquationBucket',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=32, verbose_name='name')),
                ('sequence', models.IntegerField(default=0, verbose_name='sequence')),
                ('filter_method', models.CharField(blank=True, max_length=12, null=True, verbose_name='filter method', choices=[('order', 'Order'), ('shipment', 'Shipment or Delivery'), ('dates', 'Date range'), ('process', 'Process')])),
                ('percentage', models.DecimalField(default=Decimal('0.0'), verbose_name='bucket percentage', max_digits=8, decimal_places=2)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='buckets_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='buckets_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('distribution_agent', models.ForeignKey(related_name='value_equation_buckets', verbose_name='distribution agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('filter_agent', models.ForeignKey(related_name='value_equation_filter_buckets', verbose_name='filter agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL)),
                ('value_equation', models.ForeignKey(related_name='buckets', verbose_name='value equation', to='valueaccounting.ValueEquation', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('sequence',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ValueEquationBucketRule',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('filter_rule', models.TextField(null=True, verbose_name='filter rule', blank=True)),
                ('division_rule', models.CharField(max_length=12, verbose_name='division rule', choices=[('percentage', 'Percentage'), ('fifo', 'Oldest first')])),
                ('claim_rule_type', models.CharField(max_length=12, verbose_name='claim rule type', choices=[('debt-like', 'Until paid off'), ('equity-like', 'Forever'), ('once', 'One distribution')])),
                ('claim_creation_equation', models.TextField(null=True, verbose_name='claim creation equation', blank=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('changed_date', models.DateField(auto_now=True, null=True)),
                ('changed_by', models.ForeignKey(related_name='rules_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL)),
                ('created_by', models.ForeignKey(related_name='rules_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL)),
                ('event_type', models.ForeignKey(related_name='bucket_rules', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE)),
                ('value_equation_bucket', models.ForeignKey(related_name='bucket_rules', verbose_name='value equation bucket', to='valueaccounting.ValueEquationBucket', on_delete=models.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='transfertypefacetvalue',
            unique_together=set([('transfer_type', 'facet_value')]),
        ),
        migrations.AddField(
            model_name='transfer',
            name='transfer_type',
            field=models.ForeignKey(related_name='transfers', verbose_name='transfer type', blank=True, to='valueaccounting.TransferType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='resourcetypelistelement',
            unique_together=set([('resource_type_list', 'resource_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourcetypefacetvalue',
            unique_together=set([('resource_type', 'facet_value')]),
        ),
        migrations.AddField(
            model_name='processtyperesourcetype',
            name='state',
            field=models.ForeignKey(related_name='commitmenttypes_at_state', verbose_name='state', blank=True, to='valueaccounting.ResourceState', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='processtyperesourcetype',
            name='unit_of_quantity',
            field=models.ForeignKey(related_name='process_resource_qty_units', verbose_name='unit', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='process',
            name='process_pattern',
            field=models.ForeignKey(related_name='processes', verbose_name='process pattern', blank=True, to='valueaccounting.ProcessPattern', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='process',
            name='process_type',
            field=models.ForeignKey(related_name='processes', on_delete=django.db.models.deletion.SET_NULL, verbose_name='process type', blank=True, to='valueaccounting.ProcessType', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='patternusecase',
            name='pattern',
            field=models.ForeignKey(related_name='use_cases', verbose_name='pattern', to='valueaccounting.ProcessPattern', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='patternusecase',
            name='use_case',
            field=models.ForeignKey(related_name='patterns', verbose_name='use case', blank=True, to='valueaccounting.UseCase', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='patternfacetvalue',
            name='pattern',
            field=models.ForeignKey(related_name='facets', verbose_name='pattern', to='valueaccounting.ProcessPattern', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='patternfacetvalue',
            unique_together=set([('pattern', 'facet_value', 'event_type')]),
        ),
        migrations.AddField(
            model_name='incomeeventdistribution',
            name='unit_of_quantity',
            field=models.ForeignKey(related_name='units', verbose_name='unit', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='feature',
            name='process_type',
            field=models.ForeignKey(related_name='features', verbose_name='process type', blank=True, to='valueaccounting.ProcessType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='feature',
            name='product',
            field=models.ForeignKey(related_name='features', verbose_name='product', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='feature',
            name='unit_of_quantity',
            field=models.ForeignKey(related_name='feature_units', verbose_name='unit', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='facetvalue',
            unique_together=set([('facet', 'value')]),
        ),
        migrations.AddField(
            model_name='exchangetype',
            name='use_case',
            field=models.ForeignKey(related_name='exchange_types', verbose_name='use case', blank=True, to='valueaccounting.UseCase', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='exchange',
            name='exchange_type',
            field=models.ForeignKey(related_name='exchanges', verbose_name='exchange type', blank=True, to='valueaccounting.ExchangeType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='exchange',
            name='order',
            field=models.ForeignKey(related_name='exchanges', verbose_name='order', blank=True, to='valueaccounting.Order', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='exchange',
            name='process_pattern',
            field=models.ForeignKey(related_name='exchanges', verbose_name='pattern', blank=True, to='valueaccounting.ProcessPattern', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='exchange',
            name='supplier',
            field=models.ForeignKey(related_name='exchanges_as_supplier', verbose_name='supplier', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='exchange',
            name='use_case',
            field=models.ForeignKey(related_name='exchanges', verbose_name='use case', blank=True, to='valueaccounting.UseCase', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresourcetype',
            name='resource_class',
            field=models.ForeignKey(related_name='resource_types', verbose_name='resource class', blank=True, to='valueaccounting.ResourceClass', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresourcetype',
            name='unit',
            field=models.ForeignKey(related_name='resource_units', blank=True, to='valueaccounting.Unit', help_text='if this resource has different units of use and inventory, this is the unit of inventory', null=True, verbose_name='unit', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresourcetype',
            name='unit_of_price',
            field=models.ForeignKey(related_name='resource_type_price_units', verbose_name='unit of price', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresourcetype',
            name='unit_of_use',
            field=models.ForeignKey(related_name='units_of_use', blank=True, to='valueaccounting.Unit', help_text='if this resource has different units of use and inventory, this is the unit of use', null=True, verbose_name='unit of use', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresourcetype',
            name='unit_of_value',
            field=models.ForeignKey(related_name='resource_type_value_units', blank=True, editable=False, to='valueaccounting.Unit', null=True, verbose_name='unit of value', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='current_location',
            field=models.ForeignKey(related_name='resources_at_location', verbose_name='current location', blank=True, to='valueaccounting.Location', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='exchange_stage',
            field=models.ForeignKey(related_name='resources_at_exchange_stage', verbose_name='exchange stage', blank=True, to='valueaccounting.ExchangeType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='independent_demand',
            field=models.ForeignKey(related_name='dependent_resources', verbose_name='independent demand', blank=True, to='valueaccounting.Order', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='order_item',
            field=models.ForeignKey(related_name='stream_resources', verbose_name='order item', blank=True, to='valueaccounting.Commitment', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='resource_type',
            field=models.ForeignKey(related_name='resources', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='stage',
            field=models.ForeignKey(related_name='resources_at_stage', verbose_name='stage', blank=True, to='valueaccounting.ProcessType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicresource',
            name='state',
            field=models.ForeignKey(related_name='resources_at_state', verbose_name='state', blank=True, to='valueaccounting.ResourceState', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='event_type',
            field=models.ForeignKey(related_name='events', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='exchange',
            field=models.ForeignKey(related_name='events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='exchange', blank=True, to='valueaccounting.Exchange', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='exchange_stage',
            field=models.ForeignKey(related_name='events_creating_exchange_stage', verbose_name='exchange stage', blank=True, to='valueaccounting.ExchangeType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='from_agent',
            field=models.ForeignKey(related_name='given_events', verbose_name='from', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='process',
            field=models.ForeignKey(related_name='events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='process', blank=True, to='valueaccounting.Process', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='resource',
            field=models.ForeignKey(related_name='events', verbose_name='resource', blank=True, to='valueaccounting.EconomicResource', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='resource_type',
            field=models.ForeignKey(related_name='events', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='to_agent',
            field=models.ForeignKey(related_name='taken_events', verbose_name='to', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='transfer',
            field=models.ForeignKey(related_name='events', on_delete=django.db.models.deletion.SET_NULL, verbose_name='transfer', blank=True, to='valueaccounting.Transfer', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='unit_of_price',
            field=models.ForeignKey(related_name='event_price_units', verbose_name='unit of price', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='unit_of_quantity',
            field=models.ForeignKey(related_name='event_qty_units', verbose_name='unit', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicevent',
            name='unit_of_value',
            field=models.ForeignKey(related_name='event_value_units', verbose_name='unit of value', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicagent',
            name='primary_location',
            field=models.ForeignKey(related_name='agents_at_location', on_delete=django.db.models.deletion.SET_NULL, verbose_name='current location', blank=True, to='valueaccounting.Location', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='economicagent',
            name='unit_of_claim_value',
            field=models.ForeignKey(related_name='agents', blank=True, to='valueaccounting.Unit', help_text='For a context agent, the unit of all claims', null=True, verbose_name='unit used in claims', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distributionvalueequation',
            name='exchange',
            field=models.ForeignKey(related_name='value_equation', verbose_name='exchange', blank=True, to='valueaccounting.Exchange', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distributionvalueequation',
            name='value_equation_link',
            field=models.ForeignKey(related_name='distributions_ve', verbose_name='value equation link', blank=True, to='valueaccounting.ValueEquation', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distribution',
            name='context_agent',
            field=models.ForeignKey(related_name='distributions', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distribution',
            name='created_by',
            field=models.ForeignKey(related_name='distributions_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distribution',
            name='process_pattern',
            field=models.ForeignKey(related_name='distributions', verbose_name='pattern', blank=True, to='valueaccounting.ProcessPattern', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='distribution',
            name='value_equation',
            field=models.ForeignKey(related_name='distributions', verbose_name='value equation link', blank=True, to='valueaccounting.ValueEquation', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='context_agent',
            field=models.ForeignKey(related_name='commitments', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='created_by',
            field=models.ForeignKey(related_name='commitments_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='event_type',
            field=models.ForeignKey(related_name='commitments', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='exchange',
            field=models.ForeignKey(related_name='commitments', verbose_name='exchange', blank=True, to='valueaccounting.Exchange', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='exchange_stage',
            field=models.ForeignKey(related_name='commitments_at_exchange_stage', verbose_name='exchange stage', blank=True, to='valueaccounting.ExchangeType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='from_agent',
            field=models.ForeignKey(related_name='given_commitments', verbose_name='from', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='from_agent_type',
            field=models.ForeignKey(related_name='given_commitments', verbose_name='from agent type', blank=True, to='valueaccounting.AgentType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='independent_demand',
            field=models.ForeignKey(related_name='dependent_commitments', verbose_name='independent demand', blank=True, to='valueaccounting.Order', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='order',
            field=models.ForeignKey(related_name='commitments', verbose_name='order', blank=True, to='valueaccounting.Order', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='order_item',
            field=models.ForeignKey(related_name='stream_commitments', verbose_name='order item', blank=True, to='valueaccounting.Commitment', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='process',
            field=models.ForeignKey(related_name='commitments', verbose_name='process', blank=True, to='valueaccounting.Process', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='resource',
            field=models.ForeignKey(related_name='commitments', verbose_name='resource', blank=True, to='valueaccounting.EconomicResource', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='resource_type',
            field=models.ForeignKey(related_name='commitments', verbose_name='resource type', blank=True, to='valueaccounting.EconomicResourceType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='stage',
            field=models.ForeignKey(related_name='commitments_at_stage', verbose_name='stage', blank=True, to='valueaccounting.ProcessType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='state',
            field=models.ForeignKey(related_name='commitments_at_state', verbose_name='state', blank=True, to='valueaccounting.ResourceState', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='to_agent',
            field=models.ForeignKey(related_name='taken_commitments', verbose_name='to', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='transfer',
            field=models.ForeignKey(related_name='commitments', blank=True, to='valueaccounting.Transfer', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='unit_of_quantity',
            field=models.ForeignKey(related_name='commitment_qty_units', verbose_name='unit', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='commitment',
            name='unit_of_value',
            field=models.ForeignKey(related_name='commitment_value_units', verbose_name='unit of value', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claimevent',
            name='event',
            field=models.ForeignKey(related_name='claim_events', verbose_name='claim event', blank=True, to='valueaccounting.EconomicEvent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claimevent',
            name='unit_of_value',
            field=models.ForeignKey(related_name='claim_event_value_units', verbose_name='unit of value', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claim',
            name='against_agent',
            field=models.ForeignKey(related_name='claims_against', verbose_name='against', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claim',
            name='context_agent',
            field=models.ForeignKey(related_name='claims', on_delete=django.db.models.deletion.SET_NULL, verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claim',
            name='has_agent',
            field=models.ForeignKey(related_name='has_claims', verbose_name='has', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claim',
            name='unit_of_value',
            field=models.ForeignKey(related_name='claim_value_units', verbose_name='unit of value', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='claim',
            name='value_equation_bucket_rule',
            field=models.ForeignKey(related_name='claims', verbose_name='value equation bucket rule', blank=True, to='valueaccounting.ValueEquationBucketRule', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cachedeventsummary',
            name='agent',
            field=models.ForeignKey(related_name='cached_events', verbose_name='agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cachedeventsummary',
            name='context_agent',
            field=models.ForeignKey(related_name='context_cached_events', verbose_name='context agent', blank=True, to='valueaccounting.EconomicAgent', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cachedeventsummary',
            name='event_type',
            field=models.ForeignKey(related_name='cached_events', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cachedeventsummary',
            name='resource_type',
            field=models.ForeignKey(related_name='cached_events', verbose_name='resource type', blank=True, to='valueaccounting.EconomicResourceType', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentuser',
            name='agent',
            field=models.ForeignKey(related_name='users', verbose_name='agent', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentuser',
            name='user',
            field=models.OneToOneField(related_name='agent', verbose_name='user', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='agent',
            field=models.ForeignKey(related_name='resource_types', verbose_name='agent', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='changed_by',
            field=models.ForeignKey(related_name='arts_changed', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='changed by', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='created_by',
            field=models.ForeignKey(related_name='arts_created', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='created by', on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='event_type',
            field=models.ForeignKey(related_name='agent_resource_types', verbose_name='event type', to='valueaccounting.EventType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='resource_type',
            field=models.ForeignKey(related_name='agents', verbose_name='resource type', to='valueaccounting.EconomicResourceType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcetype',
            name='unit_of_value',
            field=models.ForeignKey(related_name='agent_resource_value_units', verbose_name='unit of value', blank=True, to='valueaccounting.Unit', null=True, on_delete=models.SET_NULL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcerole',
            name='agent',
            field=models.ForeignKey(related_name='agent_resource_roles', verbose_name='agent', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcerole',
            name='resource',
            field=models.ForeignKey(related_name='agent_resource_roles', verbose_name='resource', to='valueaccounting.EconomicResource', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentresourcerole',
            name='role',
            field=models.ForeignKey(related_name='agent_resource_roles', verbose_name='role', to='valueaccounting.AgentResourceRoleType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentassociation',
            name='association_type',
            field=models.ForeignKey(related_name='associations', verbose_name='association type', to='valueaccounting.AgentAssociationType', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentassociation',
            name='has_associate',
            field=models.ForeignKey(related_name='has_associates', verbose_name='has associate', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='agentassociation',
            name='is_associate',
            field=models.ForeignKey(related_name='is_associate_of', verbose_name='is associate of', to='valueaccounting.EconomicAgent', on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
